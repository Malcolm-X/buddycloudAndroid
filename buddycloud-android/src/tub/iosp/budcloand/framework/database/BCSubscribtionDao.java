package tub.iosp.budcloand.framework.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

import tub.iosp.budcloand.framework.types.BCSubscribtion;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BCSUBSCRIBTION.
*/
public class BCSubscribtionDao extends AbstractDao<BCSubscribtion, Long> {

    public static final String TABLENAME = "BCSUBSCRIBTION";

    /**
     * Properties of entity BCSubscribtion.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Subscriber = new Property(1, String.class, "subscriber", false, "SUBSCRIBER");
        public final static Property ChannelAddress = new Property(2, String.class, "channelAddress", false, "CHANNEL_ADDRESS");
        public final static Property MemberType = new Property(3, String.class, "memberType", false, "MEMBER_TYPE");
        public final static Property Cached = new Property(4, java.util.Date.class, "cached", false, "CACHED");
    };


    public BCSubscribtionDao(DaoConfig config) {
        super(config);
    }
    
    public BCSubscribtionDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BCSUBSCRIBTION' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'SUBSCRIBER' TEXT," + // 1: subscriber
                "'CHANNEL_ADDRESS' TEXT," + // 2: channelAddress
                "'MEMBER_TYPE' TEXT," + // 3: memberType
                "'CACHED' INTEGER);"); // 4: cached
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BCSUBSCRIBTION'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, BCSubscribtion entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String subscriber = entity.getSubscriber();
        if (subscriber != null) {
            stmt.bindString(2, subscriber);
        }
 
        String channelAddress = entity.getChannelAddress();
        if (channelAddress != null) {
            stmt.bindString(3, channelAddress);
        }
 
        String memberType = entity.getMemberType();
        if (memberType != null) {
            stmt.bindString(4, memberType);
        }
 
        java.util.Date cached = entity.getCached();
        if (cached != null) {
            stmt.bindLong(5, cached.getTime());
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public BCSubscribtion readEntity(Cursor cursor, int offset) {
        BCSubscribtion entity = new BCSubscribtion( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // subscriber
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channelAddress
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // memberType
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // cached
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, BCSubscribtion entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSubscriber(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannelAddress(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setMemberType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCached(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(BCSubscribtion entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(BCSubscribtion entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
