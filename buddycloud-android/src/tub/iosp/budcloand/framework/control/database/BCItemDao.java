package tub.iosp.budcloand.framework.control.database;

import tub.iosp.budcloand.framework.model.BCItem;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// TODO: Auto-generated Javadoc
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BCITEM.
*/
public class BCItemDao extends AbstractDao<BCItem, Long> {

    /** The Constant TABLENAME. */
    public static final String TABLENAME = "BCITEM";

    /**
     * Properties of entity BCItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        
        /** The Constant Id. */
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        
        /** The Constant RemoteId. */
        public final static Property RemoteId = new Property(1, String.class, "remoteId", false, "REMOTE_ID");
        
        /** The Constant Channel. */
        public final static Property Channel = new Property(2, String.class, "channel", false, "CHANNEL");
        
        /** The Constant Author. */
        public final static Property Author = new Property(3, String.class, "author", false, "AUTHOR");
        
        /** The Constant Published. */
        public final static Property Published = new Property(4, java.util.Date.class, "published", false, "PUBLISHED");
        
        /** The Constant Updated. */
        public final static Property Updated = new Property(5, java.util.Date.class, "updated", false, "UPDATED");
        
        /** The Constant Content. */
        public final static Property Content = new Property(6, String.class, "content", false, "CONTENT");
        
        /** The Constant ReplyTo. */
        public final static Property ReplyTo = new Property(7, String.class, "replyTo", false, "REPLY_TO");
        
        /** The Constant ItemType. */
        public final static Property ItemType = new Property(8, String.class, "itemType", false, "ITEM_TYPE");
        
        /** The Constant Cached. */
        public final static Property Cached = new Property(9, java.util.Date.class, "cached", false, "CACHED");
    };


    /**
     * Instantiates a new bC item dao.
     *
     * @param config the config
     */
    public BCItemDao(DaoConfig config) {
        super(config);
    }
    
    /**
     * Instantiates a new bC item dao.
     *
     * @param config the config
     * @param daoSession the dao session
     */
    public BCItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     *
     * @param db the db
     * @param ifNotExists the if not exists
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BCITEM' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'REMOTE_ID' TEXT," + // 1: remoteId
                "'CHANNEL' TEXT," + // 2: channel
                "'AUTHOR' TEXT," + // 3: author
                "'PUBLISHED' INTEGER," + // 4: published
                "'UPDATED' INTEGER," + // 5: updated
                "'CONTENT' TEXT," + // 6: content
                "'REPLY_TO' TEXT," + // 7: replyTo
                "'ITEM_TYPE' TEXT," + // 8: itemType
                "'CACHED' INTEGER);"); // 9: cached
    }

    /**
     * Drops the underlying database table.
     *
     * @param db the db
     * @param ifExists the if exists
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BCITEM'";
        db.execSQL(sql);
    }

    /**
     * Bind values.
     *
     * @param stmt the stmt
     * @param entity the entity
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, BCItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String remoteId = entity.getRemoteId();
        if (remoteId != null) {
            stmt.bindString(2, remoteId);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String author = entity.getAuthor();
        if (author != null) {
            stmt.bindString(4, author);
        }
 
        java.util.Date published = entity.getPublished();
        if (published != null) {
            stmt.bindLong(5, published.getTime());
        }
 
        java.util.Date updated = entity.getUpdated();
        if (updated != null) {
            stmt.bindLong(6, updated.getTime());
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(7, content);
        }
 
        String replyTo = entity.getReplyTo();
        if (replyTo != null) {
            stmt.bindString(8, replyTo);
        }
 
        String itemType = entity.getItemType();
        if (itemType != null) {
            stmt.bindString(9, itemType);
        }
 
        java.util.Date cached = entity.getCached();
        if (cached != null) {
            stmt.bindLong(10, cached.getTime());
        }
    }

    /**
     * Read key.
     *
     * @param cursor the cursor
     * @param offset the offset
     * @return the long
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /**
     * Read entity.
     *
     * @param cursor the cursor
     * @param offset the offset
     * @return the bC item
     * @inheritdoc
     */
    @Override
    public BCItem readEntity(Cursor cursor, int offset) {
        BCItem entity = new BCItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // remoteId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // author
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // published
            cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)), // updated
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // content
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // replyTo
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // itemType
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // cached
        );
        return entity;
    }
     
    /**
     * Read entity.
     *
     * @param cursor the cursor
     * @param entity the entity
     * @param offset the offset
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, BCItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRemoteId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAuthor(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setPublished(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setUpdated(cursor.isNull(offset + 5) ? null : new java.util.Date(cursor.getLong(offset + 5)));
        entity.setContent(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setReplyTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setItemType(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCached(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    /**
     * Update key after insert.
     *
     * @param entity the entity
     * @param rowId the row id
     * @return the long
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(BCItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /**
     * Gets the key.
     *
     * @param entity the entity
     * @return the key
     * @inheritdoc
     */
    @Override
    public Long getKey(BCItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * Checks if is entity updateable.
     *
     * @return true, if is entity updateable
     * @inheritdoc
     */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
