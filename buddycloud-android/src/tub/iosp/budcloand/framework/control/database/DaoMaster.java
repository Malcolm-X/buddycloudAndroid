package tub.iosp.budcloand.framework.control.database;

import android.content.Context;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteDatabase.CursorFactory;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;
import de.greenrobot.dao.AbstractDaoMaster;
import de.greenrobot.dao.IdentityScopeType;

// TODO: Auto-generated Javadoc
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * Master of DAO (schema version 1): knows all DAOs.
*/
public class DaoMaster extends AbstractDaoMaster {
    
    /** The Constant SCHEMA_VERSION. */
    public static final int SCHEMA_VERSION = 1;

    /**
     * Creates underlying database table using DAOs.
     *
     * @param db the db
     * @param ifNotExists the if not exists
     */
    public static void createAllTables(SQLiteDatabase db, boolean ifNotExists) {
        CacheTimeFrameDao.createTable(db, ifNotExists);
        channelPostsScopeDao.createTable(db, ifNotExists);
        BCSubscribtionDao.createTable(db, ifNotExists);
        BCItemDao.createTable(db, ifNotExists);
        BCMetaDataDao.createTable(db, ifNotExists);
    }
    
    /**
     * Drops underlying database table using DAOs.
     *
     * @param db the db
     * @param ifExists the if exists
     */
    public static void dropAllTables(SQLiteDatabase db, boolean ifExists) {
        CacheTimeFrameDao.dropTable(db, ifExists);
        channelPostsScopeDao.dropTable(db, ifExists);
        BCSubscribtionDao.dropTable(db, ifExists);
        BCItemDao.dropTable(db, ifExists);
        BCMetaDataDao.dropTable(db, ifExists);
    }
    
    /**
     * The Class OpenHelper.
     */
    public static abstract class OpenHelper extends SQLiteOpenHelper {

        /**
         * Instantiates a new open helper.
         *
         * @param context the context
         * @param name the name
         * @param factory the factory
         */
        public OpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory, SCHEMA_VERSION);
        }

        /* (non-Javadoc)
         * @see android.database.sqlite.SQLiteOpenHelper#onCreate(android.database.sqlite.SQLiteDatabase)
         */
        @Override
        public void onCreate(SQLiteDatabase db) {
            Log.i("greenDAO", "Creating tables for schema version " + SCHEMA_VERSION);
            createAllTables(db, false);
        }
    }
    
    /** WARNING: Drops all table on Upgrade! Use only during development. */
    public static class DevOpenHelper extends OpenHelper {
        
        /**
         * Instantiates a new dev open helper.
         *
         * @param context the context
         * @param name the name
         * @param factory the factory
         */
        public DevOpenHelper(Context context, String name, CursorFactory factory) {
            super(context, name, factory);
        }

        /* (non-Javadoc)
         * @see android.database.sqlite.SQLiteOpenHelper#onUpgrade(android.database.sqlite.SQLiteDatabase, int, int)
         */
        @Override
        public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
            Log.i("greenDAO", "Upgrading schema from version " + oldVersion + " to " + newVersion + " by dropping all tables");
            dropAllTables(db, true);
            onCreate(db);
        }
    }

    /**
     * Instantiates a new dao master.
     *
     * @param db the db
     */
    public DaoMaster(SQLiteDatabase db) {
        super(db, SCHEMA_VERSION);
        registerDaoClass(CacheTimeFrameDao.class);
        registerDaoClass(channelPostsScopeDao.class);
        registerDaoClass(BCSubscribtionDao.class);
        registerDaoClass(BCItemDao.class);
        registerDaoClass(BCMetaDataDao.class);
    }
    
    /* (non-Javadoc)
     * @see de.greenrobot.dao.AbstractDaoMaster#newSession()
     */
    public DaoSession newSession() {
        return new DaoSession(db, IdentityScopeType.Session, daoConfigMap);
    }
    
    /* (non-Javadoc)
     * @see de.greenrobot.dao.AbstractDaoMaster#newSession(de.greenrobot.dao.IdentityScopeType)
     */
    public DaoSession newSession(IdentityScopeType type) {
        return new DaoSession(db, type, daoConfigMap);
    }
    
}
