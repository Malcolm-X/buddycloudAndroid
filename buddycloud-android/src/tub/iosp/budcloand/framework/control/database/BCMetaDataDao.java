package tub.iosp.budcloand.framework.control.database;

import tub.iosp.budcloand.framework.model.BCMetaData;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoConfig;
import de.greenrobot.dao.Property;

// TODO: Auto-generated Javadoc
// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table BCMETA_DATA.
*/
public class BCMetaDataDao extends AbstractDao<BCMetaData, Long> {

    /** The Constant TABLENAME. */
    public static final String TABLENAME = "BCMETA_DATA";

    /**
     * Properties of entity BCMetaData.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        
        /** The Constant Id. */
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        
        /** The Constant Title. */
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        
        /** The Constant Channel. */
        public final static Property Channel = new Property(2, String.class, "channel", false, "CHANNEL");
        
        /** The Constant Description. */
        public final static Property Description = new Property(3, String.class, "description", false, "DESCRIPTION");
        
        /** The Constant Creation_date. */
        public final static Property Creation_date = new Property(4, java.util.Date.class, "creation_date", false, "CREATION_DATE");
        
        /** The Constant Access_model. */
        public final static Property Access_model = new Property(5, String.class, "access_model", false, "ACCESS_MODEL");
        
        /** The Constant Channel_type. */
        public final static Property Channel_type = new Property(6, String.class, "channel_type", false, "CHANNEL_TYPE");
        
        /** The Constant Cached. */
        public final static Property Cached = new Property(7, java.util.Date.class, "cached", false, "CACHED");
    };


    /**
     * Instantiates a new bC meta data dao.
     *
     * @param config the config
     */
    public BCMetaDataDao(DaoConfig config) {
        super(config);
    }
    
    /**
     * Instantiates a new bC meta data dao.
     *
     * @param config the config
     * @param daoSession the dao session
     */
    public BCMetaDataDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     *
     * @param db the db
     * @param ifNotExists the if not exists
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'BCMETA_DATA' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'TITLE' TEXT," + // 1: title
                "'CHANNEL' TEXT," + // 2: channel
                "'DESCRIPTION' TEXT," + // 3: description
                "'CREATION_DATE' INTEGER," + // 4: creation_date
                "'ACCESS_MODEL' TEXT," + // 5: access_model
                "'CHANNEL_TYPE' TEXT," + // 6: channel_type
                "'CACHED' INTEGER);"); // 7: cached
    }

    /**
     * Drops the underlying database table.
     *
     * @param db the db
     * @param ifExists the if exists
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'BCMETA_DATA'";
        db.execSQL(sql);
    }

    /**
     * Bind values.
     *
     * @param stmt the stmt
     * @param entity the entity
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, BCMetaData entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(2, title);
        }
 
        String channel = entity.getChannel();
        if (channel != null) {
            stmt.bindString(3, channel);
        }
 
        String description = entity.getDescription();
        if (description != null) {
            stmt.bindString(4, description);
        }
 
        java.util.Date creation_date = entity.getCreation_date();
        if (creation_date != null) {
            stmt.bindLong(5, creation_date.getTime());
        }
 
        String access_model = entity.getAccess_model();
        if (access_model != null) {
            stmt.bindString(6, access_model);
        }
 
        String channel_type = entity.getChannel_type();
        if (channel_type != null) {
            stmt.bindString(7, channel_type);
        }
 
        java.util.Date cached = entity.getCached();
        if (cached != null) {
            stmt.bindLong(8, cached.getTime());
        }
    }

    /**
     * Read key.
     *
     * @param cursor the cursor
     * @param offset the offset
     * @return the long
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /**
     * Read entity.
     *
     * @param cursor the cursor
     * @param offset the offset
     * @return the bC meta data
     * @inheritdoc
     */
    @Override
    public BCMetaData readEntity(Cursor cursor, int offset) {
        BCMetaData entity = new BCMetaData( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // title
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // channel
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // description
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // creation_date
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // access_model
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // channel_type
            cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)) // cached
        );
        return entity;
    }
     
    /**
     * Read entity.
     *
     * @param cursor the cursor
     * @param entity the entity
     * @param offset the offset
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, BCMetaData entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setChannel(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setDescription(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCreation_date(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setAccess_model(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setChannel_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCached(cursor.isNull(offset + 7) ? null : new java.util.Date(cursor.getLong(offset + 7)));
     }
    
    /**
     * Update key after insert.
     *
     * @param entity the entity
     * @param rowId the row id
     * @return the long
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(BCMetaData entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /**
     * Gets the key.
     *
     * @param entity the entity
     * @return the key
     * @inheritdoc
     */
    @Override
    public Long getKey(BCMetaData entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * Checks if is entity updateable.
     *
     * @return true, if is entity updateable
     * @inheritdoc
     */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
