package tub.iosp.budcloand.framework.model;

import tub.iosp.budcloand.framework.control.database.CacheTimeFrameDao;
import tub.iosp.budcloand.framework.control.database.DaoSession;
import tub.iosp.budcloand.framework.control.database.channelPostsScopeDao;
import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.DaoException;

// TODO: Auto-generated Javadoc
// THIS CODE IS GENERATED BY greenDAO, 
/**
 * Entity mapped to table CACHED_CHANNELS.
 * This class is used to store all continuous 
 * timeframes in the cache in correct order
 */
public class channelPostsScope {

    /** The id in the database. */
    private Long id;
    
    /** The channel's jid. */
    private String name;
    
    /** The first time frame's id. */
    private Long timeFrameId;

    /** Used to resolve relations. */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient channelPostsScopeDao myDao;

    /** The cache timeframe. */
    private CacheTimeFrame cacheTimeFrame;
    
    /** The cache timeframes's resolved key. */
    private Long cacheTimeFrame__resolvedKey;


    /**
     * Instantiates a new channel posts scope.
     */
    public channelPostsScope() {
    }

    /**
     * Instantiates a new channel posts scope.
     *
     * @param id the id for this postsScope in the database
     * set to null to let the application manage your keys.
     */
    public channelPostsScope(Long id) {
        this.id = id;
    }

    /**
     * Instantiates a new channel posts scope.
     *
     * @param id the id int the db
     * set to null to let the application manage your keys.
     * @param name the name
     * @param timeFrameId the timeframe's id
     */
    public channelPostsScope(Long id, String name, Long timeFrameId) {
        this.id = id;
        this.name = name;
        this.timeFrameId = timeFrameId;
    }

    /**
     * called by internal mechanisms, do not call yourself.
     *
     * @param daoSession the dao session
     */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getChannelPostsScopeDao() : null;
    }

    /**
     * Gets the id.
     *
     * @return the id in the db.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the id.
     *
     * @param id the new id. Setting the id manually can corrupt your database!
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Gets the channelname.
     *
     * @return the channel's jid
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the channelname.
     *
     * @param name the new jid of the channel
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Gets the time frame id.
     *
     * @return the time frame id
     */
    public Long getTimeFrameId() {
        return timeFrameId;
    }

    /**
     * Sets the time frame id.
     *
     * @param timeFrameId the new time frame id
     */
    public void setTimeFrameId(Long timeFrameId) {
        this.timeFrameId = timeFrameId;
    }

    /**
     * To-one relationship, resolved on first access.
     *
     * @return the cache time frame
     */
    public CacheTimeFrame getCacheTimeFrame() {
        if (cacheTimeFrame__resolvedKey == null || !cacheTimeFrame__resolvedKey.equals(timeFrameId)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CacheTimeFrameDao targetDao = daoSession.getCacheTimeFrameDao();
            cacheTimeFrame = targetDao.load(timeFrameId);
            cacheTimeFrame__resolvedKey = timeFrameId;
        }
        return cacheTimeFrame;
    }

    /**
     * Sets the cache time frame.
     *
     * @param cacheTimeFrame the new cache time frame
     */
    public void setCacheTimeFrame(CacheTimeFrame cacheTimeFrame) {
        this.cacheTimeFrame = cacheTimeFrame;
        timeFrameId = cacheTimeFrame == null ? null : cacheTimeFrame.getId();
        cacheTimeFrame__resolvedKey = timeFrameId;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
